use crate::{
    c_std::StdError,
    generate_errors,
    impl_into_u8,
    utils::errors::{build_string, CodeType, DetailedError},
};
use cosmwasm_schema::cw_serde;

generate_errors!("governance";
    MissingFundingToken, "Funding token must be set", missing_funding_token,
    MissingVotingToken, "Voting token must be set", missing_voting_token,
    UnauthorizedVK, "Viewing key is invalid", bad_vk,
    PermitRevoked, "Permit key was revoked", bad_pkey,
    WasmEventNotFound, "Could not find \"wasm\" event", bad_event,
    UnrecognizedReplyID, "Reply ID {} was not recognized", wrong_reply,
    MissingMigrationEvents, "{} not found for instantiation", missing_migration_event,
    ItemNotFound, "ID {} of type {} not found", item_not_found,
    VotingEnded, "Voting ended at {}", voting_ended,
    NotAssemblyVoting, "Proposal is not in assembly vote phase", not_assembly_voting,
    AssemblyVoteQty, "Assembly vote can only be one", assembly_vote_qty,
    MsgNotInAssembly, "Msg not allowed in assembly", msg_not_in_assembly,
    MsgNotInContract, "Msg not allowed in contract", msg_not_in_contract,
    ContractDisabled, "Contract is disabled", contract_disabled,
    MigrationNotStarted, "Migration has not started", migration_not_started,
    NoMigrationTarget, "No migration target found", migration_tartet,
    NotMigrator, "Can only be called by old governance", no_migrator,
    AssembliesLimited, "Runtime state only permits specific assemblies to operate", assemblies_limited,
    ContractMigrated, "Contract has migrated and cannot be interacted with anymore", migrated,
    ProfileDisabled, "Profile {} is disabled", profile_disabled,
    NotInAssembly, "{} is not in Assembly {}", not_in_assembly,
    NotSelf, "Message signer can only be Governance", not_self,
    ProposalNotPassed, "Proposal has not passed", not_passed,
    CannotCancel, "Proposal can be canceled at {}", cannot_cancel,
    CannotUpdate, "Proposal in status {} cannot be updated until {}", cannot_update,
    UnexpectedQueryResponse, "Unexpected query response", unexpected_query_response,
    StateCannotUpdate, "Current proposal state cannot be updated through this message", state_update,
    FundingMsgNotSet, "Funding message was not set", funding_msg_not_set,
    FundingLimitReached, "Funding time limit has been reached", funding_limit_reached,
    CompletelyFunded, "Proposal is completely funded", completely_funded,
    NoFundingProfile, "Funding profile setting was removed", no_funding_profile,
    NoFundingState, "Proposal not in funding state", no_funding_state,
    FundingNotClaimable, "Cannot claim funding", funding_not_claimable,
    FundingClaimed, "Funding already claimed", funding_claimed,
    FundingNothing, "Noting to claim", funding_nothing,
    SenderMustBeFunding, "Sender must be the funding token", sender_funding,
    VotingMoreThanBalance, "Total vote is greater than available balance", voting_balance,
    VotingMsgNotSet, "Msg missing voting information", voting_msg,
    VotingTimeReached, "Voting time was reached on {}", voting_time,
    VotingNotInState, "Not in public voting phase", voting_not_state
);
