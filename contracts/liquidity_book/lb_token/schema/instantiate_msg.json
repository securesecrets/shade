{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "curators",
    "entropy",
    "has_admin",
    "initial_tokens",
    "lb_pair_info"
  ],
  "properties": {
    "admin": {
      "description": "if `admin` == `None` && `has_admin` == `true`, the instantiator will be admin if `has_admin` == `false`, this field will be ignore (ie: there will be no admin)",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "curators": {
      "description": "sets initial list of curators, which can create new token_ids",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Addr"
      }
    },
    "entropy": {
      "description": "for `create_viewing_key` function",
      "type": "string"
    },
    "has_admin": {
      "description": "if `false` the contract will instantiate permanently as a no-admin (permissionless) contract",
      "type": "boolean"
    },
    "initial_tokens": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CurateTokenId"
      }
    },
    "lb_pair_info": {
      "$ref": "#/definitions/LbPair"
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Authentication": {
      "description": "media file authentication",
      "type": "object",
      "properties": {
        "key": {
          "description": "either a decryption key for encrypted files or a password for basic authentication",
          "type": [
            "string",
            "null"
          ]
        },
        "user": {
          "description": "username used in basic authentication",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "CurateTokenId": {
      "type": "object",
      "required": [
        "balances",
        "token_info"
      ],
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenIdBalance"
          }
        },
        "token_info": {
          "$ref": "#/definitions/TokenInfoMsg"
        }
      }
    },
    "Extension": {
      "description": "metadata extension You can add any metadata fields you need here.  These fields are based on <https://docs.opensea.io/docs/metadata-standards> and are the metadata fields that Stashh uses for robust NFT display.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
      "type": "object",
      "properties": {
        "animation_url": {
          "description": "url to a multimedia attachment",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "item attributes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "background_color": {
          "description": "background color represented as a six-character hexadecimal without a pre-pended #",
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "description": "item description",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "url to allow users to view the item on your site",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "url to the image",
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "description": "raw SVG image data (not recommended). Only use this if you're not including the image parameter",
          "type": [
            "string",
            "null"
          ]
        },
        "media": {
          "description": "media files as specified on Stashh that allows for basic authenticatiion and decryption keys. Most of the above is used for bridging public eth NFT metadata easily, whereas `media` will be used when minting NFTs on Stashh",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/MediaFile"
          }
        },
        "name": {
          "description": "name of the item",
          "type": [
            "string",
            "null"
          ]
        },
        "protected_attributes": {
          "description": "a select list of trait_types that are in the private metadata.  This will only ever be used in public metadata",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "token_subtype": {
          "description": "token subtypes used by Stashh for display groupings (primarily used for badges)",
          "type": [
            "string",
            "null"
          ]
        },
        "youtube_url": {
          "description": "url to a YouTube video",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "LbPair": {
      "description": "message sent my instantiator and curators for a specific `token_id`'s token info",
      "type": "object",
      "required": [
        "decimals",
        "lb_pair_address",
        "name",
        "symbol"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "lb_pair_address": {
          "$ref": "#/definitions/Addr"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "MediaFile": {
      "description": "media file",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "authentication": {
          "description": "authentication information",
          "anyOf": [
            {
              "$ref": "#/definitions/Authentication"
            },
            {
              "type": "null"
            }
          ]
        },
        "extension": {
          "description": "file extension",
          "type": [
            "string",
            "null"
          ]
        },
        "file_type": {
          "description": "file type Stashh currently uses: \"image\", \"video\", \"audio\", \"text\", \"font\", \"application\"",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "description": "url to the file.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "description": "token metadata",
      "type": "object",
      "properties": {
        "extension": {
          "description": "optional on-chain metadata.  Only use this if you are not using `token_uri`",
          "anyOf": [
            {
              "$ref": "#/definitions/Extension"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_uri": {
          "description": "optional uri for off-chain metadata.  This should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`.  Only use this if you are not using `extension`",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "TknConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "fungible"
          ],
          "properties": {
            "fungible": {
              "type": "object",
              "required": [
                "decimals",
                "enable_burn",
                "enable_mint",
                "minter_may_update_metadata",
                "minters",
                "public_total_supply"
              ],
              "properties": {
                "decimals": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "enable_burn": {
                  "type": "boolean"
                },
                "enable_mint": {
                  "type": "boolean"
                },
                "minter_may_update_metadata": {
                  "type": "boolean"
                },
                "minters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "public_total_supply": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "nft"
          ],
          "properties": {
            "nft": {
              "type": "object",
              "required": [
                "enable_burn",
                "minter_may_update_metadata",
                "minters",
                "owner_is_public",
                "owner_may_update_metadata",
                "public_total_supply"
              ],
              "properties": {
                "enable_burn": {
                  "type": "boolean"
                },
                "minter_may_update_metadata": {
                  "type": "boolean"
                },
                "minters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "owner_is_public": {
                  "type": "boolean"
                },
                "owner_may_update_metadata": {
                  "type": "boolean"
                },
                "public_total_supply": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TokenIdBalance": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "description": "For BurnToken, `address` needs to be the owner's address. This design decision is to allow `BurnToken` to apply to other addresses, possible in the additional specifications",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "amount": {
          "$ref": "#/definitions/Uint256"
        }
      }
    },
    "TokenInfoMsg": {
      "description": "message sent my instantiator and curators for a specific `token_id`'s token info",
      "type": "object",
      "required": [
        "name",
        "symbol",
        "token_config",
        "token_id"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "private_metadata": {
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "public_metadata": {
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "symbol": {
          "type": "string"
        },
        "token_config": {
          "$ref": "#/definitions/TknConfig"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "Trait": {
      "description": "attribute trait",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "display_type": {
          "description": "indicates how a trait should be displayed",
          "type": [
            "string",
            "null"
          ]
        },
        "max_value": {
          "description": "optional max value for numerical traits",
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "description": "name of the trait",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "trait value",
          "type": "string"
        }
      }
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use secret_cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
