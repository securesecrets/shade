{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryAnswer",
  "description": "the query responses for each [QueryMsg](crate::msg::QueryMsg) variant",
  "oneOf": [
    {
      "description": "returns contract-level information:",
      "type": "object",
      "required": [
        "token_contract_info"
      ],
      "properties": {
        "token_contract_info": {
          "type": "object",
          "required": [
            "all_token_ids",
            "curators"
          ],
          "properties": {
            "admin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "all_token_ids": {
              "description": "the list of all token_ids that have been curated",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "curators": {
              "description": "the list of curators in the contract",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "id_total_balance"
      ],
      "properties": {
        "id_total_balance": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returns balance of a specific token_id. Owners can give permission to other addresses to query their balance",
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returns all token_id balances owned by an address. Only owners can use this query",
      "type": "object",
      "required": [
        "all_balances"
      ],
      "properties": {
        "all_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerBalance"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "all permissions related to a particular address. Note that \"curation\" is not recorded as a transaction per se, but the tokens minted as part of the initial_balances set by the curator is recorded under `TxAction::Mint`",
      "type": "object",
      "required": [
        "transaction_history"
      ],
      "properties": {
        "transaction_history": {
          "type": "object",
          "required": [
            "total",
            "txs"
          ],
          "properties": {
            "total": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "txs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tx"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "permission"
      ],
      "properties": {
        "permission": {
          "anyOf": [
            {
              "$ref": "#/definitions/Permission"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    {
      "description": "all permissions granted, viewable by the permission granter. Users or applications can match the permission_keys that corresponds to each permission as they have a similar order, ie: the index of `permission_keys` vector corresponds to the index of the `permissions` vector.",
      "type": "object",
      "required": [
        "all_permissions"
      ],
      "properties": {
        "all_permissions": {
          "type": "object",
          "required": [
            "permission_keys",
            "permissions",
            "total"
          ],
          "properties": {
            "permission_keys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PermissionKey"
              }
            },
            "permissions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            },
            "total": {
              "description": "the total number of permission entries stored for a given granter, which may include \"blank\" permissions, ie: where all permissions are set to `false` or `Uint256(0)`",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "token_id_public_info"
      ],
      "properties": {
        "token_id_public_info": {
          "type": "object",
          "required": [
            "token_id_info"
          ],
          "properties": {
            "owner": {
              "description": "if owner_is_public == false, total_supply = None",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "token_id_info": {
              "description": "token_id_info.private_metadata will always = None",
              "allOf": [
                {
                  "$ref": "#/definitions/StoredTokenInfo"
                }
              ]
            },
            "total_supply": {
              "description": "if public_total_supply == false, total_supply = None",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "token_id_private_info"
      ],
      "properties": {
        "token_id_private_info": {
          "type": "object",
          "required": [
            "token_id_info"
          ],
          "properties": {
            "owner": {
              "description": "if owner_is_public == false, total_supply = None",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "token_id_info": {
              "$ref": "#/definitions/StoredTokenInfo"
            },
            "total_supply": {
              "description": "if public_total_supply == false, total_supply = None",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returns None if contract has not registered with SNIP1155 contract",
      "type": "object",
      "required": [
        "registered_code_hash"
      ],
      "properties": {
        "registered_code_hash": {
          "type": "object",
          "properties": {
            "code_hash": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returned when an viewing_key-specific errors occur during a user's attempt to perform an authenticated query",
      "type": "object",
      "required": [
        "viewing_key_error"
      ],
      "properties": {
        "viewing_key_error": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Authentication": {
      "description": "media file authentication",
      "type": "object",
      "properties": {
        "key": {
          "description": "either a decryption key for encrypted files or a password for basic authentication",
          "type": [
            "string",
            "null"
          ]
        },
        "user": {
          "description": "username used in basic authentication",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Expiration": {
      "description": "at the given point in time and after, Expiration will be considered expired",
      "oneOf": [
        {
          "description": "expires at this block height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "expires at the time in seconds since 01/01/1970",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "never expires",
          "type": "string",
          "enum": [
            "never"
          ]
        }
      ]
    },
    "Extension": {
      "description": "metadata extension You can add any metadata fields you need here.  These fields are based on <https://docs.opensea.io/docs/metadata-standards> and are the metadata fields that Stashh uses for robust NFT display.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
      "type": "object",
      "properties": {
        "animation_url": {
          "description": "url to a multimedia attachment",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "item attributes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "background_color": {
          "description": "background color represented as a six-character hexadecimal without a pre-pended #",
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "description": "item description",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "url to allow users to view the item on your site",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "url to the image",
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "description": "raw SVG image data (not recommended). Only use this if you're not including the image parameter",
          "type": [
            "string",
            "null"
          ]
        },
        "media": {
          "description": "media files as specified on Stashh that allows for basic authenticatiion and decryption keys. Most of the above is used for bridging public eth NFT metadata easily, whereas `media` will be used when minting NFTs on Stashh",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/MediaFile"
          }
        },
        "name": {
          "description": "name of the item",
          "type": [
            "string",
            "null"
          ]
        },
        "protected_attributes": {
          "description": "a select list of trait_types that are in the private metadata.  This will only ever be used in public metadata",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "token_subtype": {
          "description": "token subtypes used by Stashh for display groupings (primarily used for badges)",
          "type": [
            "string",
            "null"
          ]
        },
        "youtube_url": {
          "description": "url to a YouTube video",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "MediaFile": {
      "description": "media file",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "authentication": {
          "description": "authentication information",
          "anyOf": [
            {
              "$ref": "#/definitions/Authentication"
            },
            {
              "type": "null"
            }
          ]
        },
        "extension": {
          "description": "file extension",
          "type": [
            "string",
            "null"
          ]
        },
        "file_type": {
          "description": "file type Stashh currently uses: \"image\", \"video\", \"audio\", \"text\", \"font\", \"application\"",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "description": "url to the file.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "description": "token metadata",
      "type": "object",
      "properties": {
        "extension": {
          "description": "optional on-chain metadata.  Only use this if you are not using `token_uri`",
          "anyOf": [
            {
              "$ref": "#/definitions/Extension"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_uri": {
          "description": "optional uri for off-chain metadata.  This should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`.  Only use this if you are not using `extension`",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "OwnerBalance": {
      "type": "object",
      "required": [
        "amount",
        "token_id"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint256"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "Permission": {
      "description": "struct to store permission for a `[token_id, owner, allowed_addr]` combination",
      "type": "object",
      "required": [
        "trfer_allowance_exp",
        "trfer_allowance_perm",
        "view_balance_exp",
        "view_balance_perm",
        "view_pr_metadata_exp",
        "view_pr_metadata_perm"
      ],
      "properties": {
        "trfer_allowance_exp": {
          "$ref": "#/definitions/Expiration"
        },
        "trfer_allowance_perm": {
          "$ref": "#/definitions/Uint256"
        },
        "view_balance_exp": {
          "$ref": "#/definitions/Expiration"
        },
        "view_balance_perm": {
          "type": "boolean"
        },
        "view_pr_metadata_exp": {
          "$ref": "#/definitions/Expiration"
        },
        "view_pr_metadata_perm": {
          "type": "boolean"
        }
      }
    },
    "PermissionKey": {
      "description": "to store all keys to access all permissions for a given `owner`",
      "type": "object",
      "required": [
        "allowed_addr",
        "token_id"
      ],
      "properties": {
        "allowed_addr": {
          "$ref": "#/definitions/Addr"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "StoredTokenInfo": {
      "description": "information for a specific `token_id`",
      "type": "object",
      "required": [
        "curator",
        "name",
        "symbol",
        "token_config",
        "token_id"
      ],
      "properties": {
        "curator": {
          "$ref": "#/definitions/Addr"
        },
        "name": {
          "type": "string"
        },
        "private_metadata": {
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "public_metadata": {
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "symbol": {
          "type": "string"
        },
        "token_config": {
          "$ref": "#/definitions/TknConfig"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "TknConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "fungible"
          ],
          "properties": {
            "fungible": {
              "type": "object",
              "required": [
                "decimals",
                "enable_burn",
                "enable_mint",
                "minter_may_update_metadata",
                "minters",
                "public_total_supply"
              ],
              "properties": {
                "decimals": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "enable_burn": {
                  "type": "boolean"
                },
                "enable_mint": {
                  "type": "boolean"
                },
                "minter_may_update_metadata": {
                  "type": "boolean"
                },
                "minters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "public_total_supply": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "nft"
          ],
          "properties": {
            "nft": {
              "type": "object",
              "required": [
                "enable_burn",
                "minter_may_update_metadata",
                "minters",
                "owner_is_public",
                "owner_may_update_metadata",
                "public_total_supply"
              ],
              "properties": {
                "enable_burn": {
                  "type": "boolean"
                },
                "minter_may_update_metadata": {
                  "type": "boolean"
                },
                "minters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "owner_is_public": {
                  "type": "boolean"
                },
                "owner_may_update_metadata": {
                  "type": "boolean"
                },
                "public_total_supply": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Trait": {
      "description": "attribute trait",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "display_type": {
          "description": "indicates how a trait should be displayed",
          "type": [
            "string",
            "null"
          ]
        },
        "max_value": {
          "description": "optional max value for numerical traits",
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "description": "name of the trait",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "trait value",
          "type": "string"
        }
      }
    },
    "Tx": {
      "description": "tx in storage",
      "type": "object",
      "required": [
        "action",
        "block_height",
        "block_time",
        "token_id",
        "tx_id"
      ],
      "properties": {
        "action": {
          "description": "tx type and specifics",
          "allOf": [
            {
              "$ref": "#/definitions/TxAction"
            }
          ]
        },
        "block_height": {
          "description": "the block containing this tx",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "block_time": {
          "description": "the time (in seconds since 01/01/1970) of the block containing this tx",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "memo": {
          "description": "optional memo",
          "type": [
            "string",
            "null"
          ]
        },
        "token_id": {
          "description": "token id",
          "type": "string"
        },
        "tx_id": {
          "description": "tx id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "TxAction": {
      "description": "tx type and specifics for storage with Addr",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "mint"
          ],
          "properties": {
            "mint": {
              "type": "object",
              "required": [
                "amount",
                "minter",
                "recipient"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint256"
                },
                "minter": {
                  "$ref": "#/definitions/Addr"
                },
                "recipient": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount",
                "owner"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint256"
                },
                "burner": {
                  "description": "in the base specification, the burner MUST be the owner. In the additional specifications, it is OPTIONAL to allow other addresses to burn tokens.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "owner": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "`transfer` or `send` txs",
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "amount",
                "from",
                "recipient"
              ],
              "properties": {
                "amount": {
                  "description": "amount of tokens transferred",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint256"
                    }
                  ]
                },
                "from": {
                  "description": "previous owner",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "recipient": {
                  "description": "new owner",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "sender": {
                  "description": "optional sender if not owner",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use secret_cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
