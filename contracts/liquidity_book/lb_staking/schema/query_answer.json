{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryAnswer",
  "description": "the query responses for each [QueryMsg](crate::msg::QueryMsg) variant",
  "oneOf": [
    {
      "description": "returns contract-level information:",
      "type": "object",
      "required": [
        "contract_info"
      ],
      "properties": {
        "contract_info": {
          "type": "object",
          "required": [
            "admin_auth",
            "epoch_durations",
            "epoch_index",
            "lb_pair",
            "lb_token",
            "query_auth"
          ],
          "properties": {
            "admin_auth": {
              "$ref": "#/definitions/Contract"
            },
            "epoch_durations": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "epoch_index": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "expiry_durations": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "lb_pair": {
              "$ref": "#/definitions/Addr"
            },
            "lb_token": {
              "$ref": "#/definitions/ContractInfo"
            },
            "query_auth": {
              "$ref": "#/definitions/Contract"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "epoch_info"
      ],
      "properties": {
        "epoch_info": {
          "type": "object",
          "required": [
            "duration",
            "end_time",
            "start_time"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "end_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "expired_at": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "reward_tokens": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/RewardTokenInfo"
              }
            },
            "rewards_distribution": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RewardsDistribution"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "registered_tokens"
      ],
      "properties": {
        "registered_tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractInfo"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "id_total_balance"
      ],
      "properties": {
        "id_total_balance": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returns balance of a specific token_id. Owners can give permission to other addresses to query their balance",
      "type": "object",
      "required": [
        "staker_info"
      ],
      "properties": {
        "staker_info": {
          "type": "object",
          "required": [
            "total_rewards_earned"
          ],
          "properties": {
            "last_claim_rewards_round": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "starting_round": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "total_rewards_earned": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returns all token_id balances owned by an address. Only owners can use this query",
      "type": "object",
      "required": [
        "all_balances"
      ],
      "properties": {
        "all_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerBalance"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "liquidity"
      ],
      "properties": {
        "liquidity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Liquidity"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "token_id_balance"
      ],
      "properties": {
        "token_id_balance": {
          "type": "object",
          "properties": {
            "total_supply": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transaction_history"
      ],
      "properties": {
        "transaction_history": {
          "type": "object",
          "required": [
            "count",
            "txns"
          ],
          "properties": {
            "count": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "txns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tx"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "returned when an viewing_key-specific errors occur during a user's attempt to perform an authenticated query",
      "type": "object",
      "required": [
        "viewing_key_error"
      ],
      "properties": {
        "viewing_key_error": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Contract": {
      "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ContractInfo": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "default": "",
          "type": "string"
        }
      }
    },
    "Liquidity": {
      "type": "object",
      "required": [
        "token_id",
        "total_liquidity",
        "user_liquidity"
      ],
      "properties": {
        "token_id": {
          "type": "string"
        },
        "total_liquidity": {
          "$ref": "#/definitions/Uint256"
        },
        "user_liquidity": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false
    },
    "OwnerBalance": {
      "type": "object",
      "required": [
        "amount",
        "token_id"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint256"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Reward": {
      "type": "object",
      "required": [
        "epoch_index",
        "rewards"
      ],
      "properties": {
        "epoch_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RewardToken"
          }
        }
      },
      "additionalProperties": false
    },
    "RewardToken": {
      "type": "object",
      "required": [
        "amounts",
        "ids",
        "token",
        "total_amount"
      ],
      "properties": {
        "amounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "token": {
          "$ref": "#/definitions/ContractInfo"
        },
        "total_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "RewardTokenInfo": {
      "type": "object",
      "required": [
        "claimed_rewards",
        "decimals",
        "end",
        "reward_per_epoch",
        "start",
        "token",
        "total_rewards"
      ],
      "properties": {
        "claimed_rewards": {
          "$ref": "#/definitions/Uint128"
        },
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "end": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reward_per_epoch": {
          "$ref": "#/definitions/Uint128"
        },
        "start": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token": {
          "$ref": "#/definitions/ContractInfo"
        },
        "total_rewards": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "RewardsDistribution": {
      "type": "object",
      "required": [
        "denominator",
        "ids",
        "weightages"
      ],
      "properties": {
        "denominator": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "weightages": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "Tx": {
      "description": "tx in storage",
      "type": "object",
      "required": [
        "action",
        "block_height",
        "block_time",
        "tx_id"
      ],
      "properties": {
        "action": {
          "description": "tx type and specifics",
          "allOf": [
            {
              "$ref": "#/definitions/TxAction"
            }
          ]
        },
        "block_height": {
          "description": "the block containing this tx",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "block_time": {
          "description": "the time (in seconds since 01/01/1970) of the block containing this tx",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "tx_id": {
          "description": "tx id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TxAction": {
      "description": "tx type and specifics for storage",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "stake"
          ],
          "properties": {
            "stake": {
              "type": "object",
              "required": [
                "amounts",
                "ids"
              ],
              "properties": {
                "amounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Uint256"
                  }
                },
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "un_stake"
          ],
          "properties": {
            "un_stake": {
              "type": "object",
              "required": [
                "amounts",
                "ids"
              ],
              "properties": {
                "amounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Uint256"
                  }
                },
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claim_rewards"
          ],
          "properties": {
            "claim_rewards": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reward"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use secret_cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
