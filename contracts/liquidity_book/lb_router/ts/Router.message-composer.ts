/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { ExecuteMsg, Uint128, Binary, TokenType, Addr, Snip20ReceiveMsg, TokenAmount, Hop, Contract, InitMsg, InvokeMsg, QueryMsgResponse, SwapResult, QueryMsg } from "./Router.types";
export interface RouterMsg {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    from,
    memo,
    msg,
    sender
  }: {
    amount: Uint128;
    from: string;
    memo?: string;
    msg?: Binary;
    sender: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  swapTokensForExact: ({
    expectedReturn,
    offer,
    padding,
    path,
    recipient
  }: {
    expectedReturn?: Uint128;
    offer: TokenAmount;
    padding?: string;
    path: Hop[];
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerSNIP20Token: ({
    oracleKey,
    padding,
    tokenAddr,
    tokenCodeHash
  }: {
    oracleKey?: string;
    padding?: string;
    tokenAddr: string;
    tokenCodeHash: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  recoverFunds: ({
    amount,
    msg,
    padding,
    to,
    token
  }: {
    amount: Uint128;
    msg?: Binary;
    padding?: string;
    to: string;
    token: TokenType;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setConfig: ({
    adminAuth,
    padding
  }: {
    adminAuth?: Contract;
    padding?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class RouterMsgComposer implements RouterMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.swapTokensForExact = this.swapTokensForExact.bind(this);
    this.registerSNIP20Token = this.registerSNIP20Token.bind(this);
    this.recoverFunds = this.recoverFunds.bind(this);
    this.setConfig = this.setConfig.bind(this);
  }

  receive = ({
    amount,
    from,
    memo,
    msg,
    sender
  }: {
    amount: Uint128;
    from: string;
    memo?: string;
    msg?: Binary;
    sender: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            from,
            memo,
            msg,
            sender
          }
        })),
        funds: _funds
      })
    };
  };
  swapTokensForExact = ({
    expectedReturn,
    offer,
    padding,
    path,
    recipient
  }: {
    expectedReturn?: Uint128;
    offer: TokenAmount;
    padding?: string;
    path: Hop[];
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_tokens_for_exact: {
            expected_return: expectedReturn,
            offer,
            padding,
            path,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  registerSNIP20Token = ({
    oracleKey,
    padding,
    tokenAddr,
    tokenCodeHash
  }: {
    oracleKey?: string;
    padding?: string;
    tokenAddr: string;
    tokenCodeHash: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_s_n_i_p20_token: {
            oracle_key: oracleKey,
            padding,
            token_addr: tokenAddr,
            token_code_hash: tokenCodeHash
          }
        })),
        funds: _funds
      })
    };
  };
  recoverFunds = ({
    amount,
    msg,
    padding,
    to,
    token
  }: {
    amount: Uint128;
    msg?: Binary;
    padding?: string;
    to: string;
    token: TokenType;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          recover_funds: {
            amount,
            msg,
            padding,
            to,
            token
          }
        })),
        funds: _funds
      })
    };
  };
  setConfig = ({
    adminAuth,
    padding
  }: {
    adminAuth?: Contract;
    padding?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_config: {
            admin_auth: adminAuth,
            padding
          }
        })),
        funds: _funds
      })
    };
  };
}